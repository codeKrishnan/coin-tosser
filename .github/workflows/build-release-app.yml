name: Release build

on:
  workflow_dispatch:
    inputs:
      version-name:
        type: string
        required: true
        description: "Release version"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Bump Version Code
        uses: chkfung/android-version-actions@v1.2.1
        with:
          gradlePath: app/build.gradle.kts
          versionCode: '${{ github.run_number }}'
          versionName: '${{ github.event.inputs.version-name }}'

      - name: Setup JAVA 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: false

      - name: Decode Keystore
        env:
          ENCODED_STRING: ${{ secrets.SIGNING_KEY_STORE_BASE64 }}
          SIGNING_KEY_STORE_PATH: ${{ secrets.SIGNING_KEY_STORE_PATH }}
        run: |
          echo $ENCODED_STRING > keystore-b64.txt
          base64 -d keystore-b64.txt > $SIGNING_KEY_STORE_PATH

      - name: Build Release apk
        env:
          SIGNING_KEY_STORE_PATH: ${{ secrets.SIGNING_KEY_STORE_PATH }}
          SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
        run: ./gradlew assembleRelease

      - name: Build Release bundle
        env:
          SIGNING_KEY_STORE_PATH: ${{ secrets.SIGNING_KEY_STORE_PATH }}
          SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
        run: ./gradlew bundleRelease

  upload-apk:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Upload Release APK
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: |
            app/build/outputs/apk/release/

  upload-aab:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Upload Release Bundle
        uses: actions/upload-artifact@v4
        with:
          name: release-aab
          path: |
            app/build/outputs/bundle/release/

  create-pr:
    runs-on: ubuntu-latest
    needs: [upload-apk, upload-aab]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get branch name
        id: get-branch-name
        run: |
          BRANCH_NAME="release/${{ github.event.inputs.version-name }}"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Create or switch to release branch
        run: |
          git fetch origin
          if git show-ref --quiet refs/heads/origin/$BRANCH_NAME; then
            git checkout $BRANCH_NAME
          else
            git checkout -b $BRANCH_NAME origin/${{ github.ref_name }}
            git push origin $BRANCH_NAME
          fi

      - name: Check if pull request exists
        id: pr-check
        run: |
          echo "$BRANCH_NAME"
          PR_EXISTS=$(gh pr list --head $BRANCH_NAME --state open --json number --jq '. | length > 0')
          echo "pr_exists=$PR_EXISTS" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.TOKEN }}
          BRANCH_NAME: ${{ env.BRANCH_NAME }}

      - name: Create pull request (if not exists)
        if: steps.pr-check.outputs.pr_exists == 'false'
        run: |
          gh pr create -B main -H $BRANCH_NAME --title "Release ${{ github.event.inputs.version-name }}" --body "Release ${{ github.event.inputs.version-name }} PR"
        env:
          GH_TOKEN: ${{ secrets.TOKEN }}
          BRANCH_NAME: ${{ env.BRANCH_NAME }}